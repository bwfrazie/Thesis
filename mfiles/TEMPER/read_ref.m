function [S,isOk,msg] = read_ref(file)
%read_ref - Reads data from TEMPER refractivity files.
% 
%
% USE: S = read_ref([file])
%
%     If no input, file is selected graphically and current directory is
%     changed to location of selected file.
% 
%     Output is a structure with fields:
%       .file         - name of TEMPER refractivity file, or a TEMPER input file
%       .comment      - any header comments found in the file
%       .ref_units    - 'N' or 'M', units of file's refractivity data
%       .units        - 0 or 1 (ft/nmi or m/km) for file's length units
%       .n_profiles   - number of profiles in file (one for each range)
%       .range        - row-vector of range coordinates (one for each profile)
%       .height       - array of height coordinates, arranged such that the 
%                       "jth" column gives heights for profile at .range(j)
%       .refractivity - array of refractivity; "jth" column gives profile at
%                       .range(j) and at heights given by .height(:,j)
%       .absorption   - array of absorption (in dB/nmi or dB/km), with same
%                       ordering as .refractivity, or empty array if file
%                       doesn't contain absorption data
% 
%     Output is empty if problems are encountered while reading the file or
%     if check_ref.m finds an error in the structure generated by this 
%     routine (this routine calls check_ref before returning).
%
%
% USE: [S,isOk,msg] = read_ref( ... )
%
%     Same as above, except outputs from call to check_ref.m are captured and
%     reported out in the 2nd and 3rd output args. See check_ref help comments
%     for more info.
%
%     Notably, this routine will not generate a warning dialog and pause
%     execution if the extra output arguments are specified.
%
%     ****************************************************************
%     *** USERS MUST DO THEIR OWN CHECK OF THE OUTPUT FLAG AND MSG ***
%     ****************************************************************
%
%     For more details, run >> help check_ref
%
%
% USE: [...] = read_ref( inputFile )
%
%     Same as above, except code attempts to get the .ref file name out of the
%     specified TEMPER input file using getset_temper_input.m. This mode is
%     triggered when the input file ends in the extension .in.
%
%
% (c)2003-2016, Johns Hopkins University / Applied Physics Lab
% Last update: 2016-01-29


% Update List: (all JZG, unless noted)
% ------------
% 2003-03-18 - Finished coding initial version.
% 2004-04-20 - Added warning/error-check that detects when file has incorrect
% #-of-heights (and therefor extra values beyond the last file-read). 
% 2004-05-05 - Added error check that catches incorrect # of points in profiles.
% 2004-06-09 - Fixed bug for absorption-column files.
% 2004-09-12 - Catch incomplete-row error in .ref files.
% 2005-12-14 - Made empty input trigger graphical file selection.
% 2007-12-12 - Minor upgrade to 2004-04-20 warning (# of ranges could be wrong)
% and support for .in file inputs via getset_temper_input().
% 2011-09-07 - Added several fclose(fid) statements just before RETURN on error
% conditions so that file IO does not remain open for problematic files.
% 2011-12-08 - Changed behavior on file-not-found; code no longer spawns & waits
% for a msg box if any output arguments have been specified (this is to allow
% try-catch handling in the code that calls this function).
% 2015-02-03 - Added 2nd & 3rd output args and associated functionality. Updated
% header comments and overhauled the way errors are handled - replaced modal
% message boxes with call to error_handler() subroutine. Several readability
% changes in code as well (minor fix to this 2015-02-05, forgot ; after 1 line).
% 2015-12-29 - Fixed minor issue where .absorption not created for 2-column
% files when user has a file-format error. Also catch (rather than choke) on
% file-format error on line #4 of file.
% 2016-01-29 - Added third variant (introduced today in write_ref) for text on
% header line #2. Added header unit test by way of write_ref.m's unit test.


    if ( nargin == 1 ) && ischar(file) && strcmpi(file,'-test')
        run_test;
        return
    end

    % For compatibility with logical type added in R13:
    true  = (1==1);
    false = not(true);

    % Initialize output:
    S    = struct([]);
    isOk = false;
    msg  = '';
    
    if all( nargout ~= [0,1,3] )
        error('Incorrect # of output arguments, should be 1 or 3');
    end

    % Graphically prompt for filename if none input
    if ( nargin == 0 ), file = ''; end % empty triggers prompt
    
    if isempty( file )
        
        v = version;
        if ( str2num(v(1)) < 6 )
            filterSpec = '*.ref'; % v5.x (R11) supports less functionality
        else
            filterSpec = {'*.prf; *.ref', 'all TEMPER refractivity files';...
                          '*.ref',        'new TEMPER refractivity file';...
                          '*.prf',        'vintage TEMPER refractivity file';...
                          '*.in',         'TEMPER input file';... % <- added 2007-12-12
                          '*.*',          'all files'                 };
        end
        [f,p] = uigetfile( filterSpec, 'Select TEMPER refractivity file' );
        if isnumeric(f)
            msg = 'User quit at file prompt dialog';
            return % quit if user hits CANCEL
        end 
        
        file = fullfile(p,f);
        
    end

    % Added 2007-12-12: handle an .in file
    % (prior to 2015-02-03 this mode could only be accessed via graphical
    % prompt mode, in the if-end block above)
    [junk,junk,extn] = fileparts(file);
    if strcmpi(extn,'.in')
        inFile = file;
        file = getset_temper_input(inFile,'get','refFile');
        if ~exist(file,'file')
            msg =['.ref file name/path in "',inFile,'" is no longer valid']; 
            error_handler( isOk, msg, nargout );
            return
        end
    end       
        
    % Open .ref file
    fid = fopen(file,'rt');

    if ( fid < 1 )
        msg = ['File "',file,'" does not exist or cannot be opened'];
        error_handler( isOk, msg, nargout );
        return
    end


    % Read in header
    %~~~~~~~~~~~~~~~

    % Any text found to the right of the following "typical" header
    % lines is treated as a header comment:
    %   ': Refractivity Units: 0=N, 1=M       blah'
    %   ': Altitude Units: 0=ft, 1=meters    blaaah'
    %   ': Number of profiles               blaaaaah'
    % In this example, the output structure's .commment field would be
    % the following three-row character array:
    %   ['blah    ';
    %    'blaaah  ';
    %    'blaaaaah']
    
    % Read in first three lines as text, catching end-of-file
    % errors ( -1 output from FGETL):
    for i = 1:3
        line{i} = fgetl(fid);
        if isnumeric( line{i} )
            msg = ['File "',file,...
                '" empty or not valid - end-of-file reached within header'];
            fclose(fid);
            error_handler( isOk, msg, nargout );
            return
        end
    end

    % Scan off the integers from the front of these lines of text
    for i = 1:length(line)
        [temp, count, errmsg, nextIndex] = sscanf( line{i}, '%d', 1 );
        if ( count == 0 )
            msg = ['Could not read header flags from "',file,'": ',errmsg];
            fclose(fid);
            error_handler( isOk, msg, nargout );
            return
        end
        headerNum(i) = temp;
        % Strip off the just-read-in integer from line of text
        line{i} = line{i}(nextIndex:end);
    end

    % Parse the comment text out of what remains in the "line" text by stripping
    % off the normal header comments:
    %
    %-----------------------------------------------------------------------
    % TODO: improve this to be more general? (low priority because, at worst,
    % this code could only mess up the .comment field if its assumptions are
    % violated.
    %-----------------------------------------------------------------------
    line = strrep( line, ': Refractivity Units: 0=N, 1=M', '' );
    %-----------------------------------------------------------------------
    line = strrep( line, ': Altitude Units: 0=ft, 1=meters', '' );
    line = strrep( line, ': Distance Units: 0=ft/nmi, 1=meters/km', '' ); % <- new, 2013-12-06, alternate version of the 2nd header line text
    line = strrep( line, ': Altitude/range Units: 0=ft/nmi, 1=meters/km', '' ); % <- new, 2016-01-29, yet a third convention for 2nd heard line
    %-----------------------------------------------------------------------
    line = strrep( line, ': Number of profiles', '' );
    %-----------------------------------------------------------------------
    %
    % Trim leading blanks
    for i = 1:length(line)
        line{i} = fliplr( deblank( fliplr( line{i} ) ) );
    end
    
    
    % Transfer values read from
    % header into output structure
    %~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    S = struct('file',file);

    % Output comment as a (possibly) multi-row character array
    S.comment = char( line );

    switch headerNum(1)
        case 0
            S.ref_units = 'N';
        case 1
            S.ref_units = 'M';
        otherwise
            % Added this error-catch branch 2015-02-0-3
            msg = 'First number from header is not 0 or 1 (ref units flag)';
            fclose(fid);
            error_handler( isOk, msg, nargout );
            return            
    end

    S.units      = headerNum(2);
    S.n_profiles = headerNum(3);
    

    % Initialize variables used in data-
    % read loop (including automatic 
    % handling of absorption data)
    %~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    % Initialize range vector   
    S.range = zeros( 1, S.n_profiles );

    % Determine # of points in height and whether or not
    % file contains contains absorption data:
    firstProfileHeader = fgetl(fid);
    firstDataLine      = fgetl(fid);
    temp       = sscanf( firstProfileHeader, '%f' );
    if length(temp) ~= 2 % new, 2015-12-29
        msg = ['Could not read #hgts & range values for first profile',...
            ' from line #4 of file "',file,'".',sprintf('\n'),...
            'File contained the following text on that line:',sprintf('\n'),...
            firstProfileHeader ];
        fclose(fid);
        error_handler( isOk, msg, nargout );
        return
    end
    nHeights   = temp(1);
    firstRange = temp(2);
    [ junk, nColumns ] = sscanf( firstDataLine, '%f' );
    switch nColumns
        case 2
            hasAbsorption = false;
            data    = zeros(2,nHeights);
            dataFmt = '%f %f';
        case 3
            hasAbsorption = true;
            data    = zeros(3,nHeights);
            dataFmt = '%f %f %f';
        otherwise
            msg = ['"',file,'" contains ',int2str(nColumns),' data columns,',...
                ' should be 2 or 3 columns.'];
            fclose(fid);
            error_handler( isOk, msg, nargout );
            return
    end
    if not( firstRange == 0.0 )
        msg = ['First profile in "',file,'" is not at zero range'];
        fclose(fid);
        error_handler( isOk, msg, nargout );
        return
    end
    
    % Previously used FTELL / FSEEK to reposition file-io-pointer, however
    % Matlab didn't always work as expected (I suspect that tab characters
    % confuse either FTELL, FSEEK or both, when reading a text file).  For
    % example, these commands do not always produce the same "x" and "y" in all
    % versions of Matlab:
    %       savePosition = ftell(fid);
    %       x = fscanf( fid, '%c', 100 );
    %       fseek( fid, savePosition, 'bof' );
    %       y = fscanf( fid, '%c', 100 );
    % As a result, one must close & reopen the file to get a robust "FSEEK"
    % functionality:
    fclose(fid);
    fopen(S.file,'rt');
    for i = 1:3
        fgetl(fid); 
    end % Skip over first three header lines
    
    % TODO: slight speedup could be achieved by only opening file once, reading
    % all text from file, closing it then doing the scans on text array only.
    
    
    % Data-read loop
    % (loop over profiles)
    %~~~~~~~~~~~~~~~~~~~~~
    
    % In case code exits early, initialize data fields to empty here
    % (bug fix for, e.g., case where .absorption never gets set, found
    % 2015-12-29)
    S.range         = [];
    S.height        = [];
    S.refractivity  = [];
    S.absorption    = []; % (used to be set below FOR loop when ~hasAbsorption)
    
    for jProf = 1:S.n_profiles
        
        % Read in and check profile-header line
        check_nHeights = fscanf(fid,'%d',1);
        
        % New check, 2015-02-03
        if isempty( check_nHeights )
            msg = ['Data ended unexpectedly just after profile #',...
            int2str(jProf-1),' in "',file,'". Based on header,',...
            ' expected ',int2str(S.n_profiles),' full range profiles.'];
            fclose(fid);
            error_handler( isOk, msg, nargout );
            return
        end
        
        if not( check_nHeights == nHeights )
            msg = ['Profile #',int2str(jProf),' in "',file,'" specifies a',...
            ' different #-of-points (',int2str(check_nHeights),') than',...
            ' first profile (',int2str(nHeights),'); TEMPER does not allow',...
            ' #-of-points to change in multiple-range profiles'];
            fclose(fid);
            error_handler( isOk, msg, nargout );
            return
        end
        
        S.range(jProf) = fscanf(fid,'%f',1);
        
        % Read this profile's data array:
        [data,check_nHeights] = fscanf( fid, dataFmt, size(data) );
        
        % Added additional "check" 2004-05-05 b/c otherwise, an incorrectly
        % high "nHeight" would not be caught by this routine:
        check_nHeights = check_nHeights/nColumns;
        if not( check_nHeights == nHeights )
            if ( round(check_nHeights) == check_nHeights )
                % Normal case -> file simply has too few or too many rows of
                % data...
                msg = ['Profile #',int2str(jProf),' in "',file,'" is',...
                ' supposed to have ',int2str(nHeights),' points, however',...
                ' actual #-of-points = ',int2str(check_nHeights),'.  Either',...
                ' bad profile or incorrect #-of-points in profile header.'];
            else
                % Discovered 2004-09-12 -> If file has partially filled row, or
                % row with an invalid entry (e.g. "NaN"), check_nHeights will
                % not be an integer!
                errorRow = ceil(check_nHeights);
                msg = ['Profile #',int2str(jProf),' in "',file,'" has a',...
                ' problem on height #',int2str(errorRow),' - row either',...
                ' incomplete or contains invalid/non-numeric entry.'];
            end       
            %PRE 2015-02-03: S = [];
            %PRE 2015-02-03: waitfor(errordlg(msg,mfilename,'modal'));
            % ... several other similar changes made throughout routine
            fclose(fid);
            error_handler( isOk, msg, nargout );
            return
        end
        
        % Parse data into output structure
        S.height(:,jProf)         = transpose( data(1,:) );
        S.refractivity(:,jProf)   = transpose( data(2,:) );
        if ( hasAbsorption )
            S.absorption(:,jProf) = transpose( data(3,:) );
        end
        
    end
    
    % Error-check added 2004-04-20 -> Make sure there are not extra points in
    % file.  While TEMPER will process such a file without crashing, it runs
    % the risk of computing a much different atmosphere than expected.
    [check,checkCount] = fscanf(fid,'%f',1);
    
    % This is the normal close point for file
    fclose(fid);
    isOk = true; % ... may still be set to false by check_prt() call, below
    
    if ( checkCount ~= 0 )
        msg = ['Extra data found at the end of "',file,'" - likely cause is',...
               ' an incorrect #-of-heights'];
        if ( S.n_profiles > 1 ), msg = [msg,' and/or #-of-ranges']; end
        msg = [msg,' value in the file. Please examine and fix this file!'];
        error_handler( isOk, msg, nargout ); % <- isOk will be true here
        return
    end

    [isOk2, msg2] = check_ref( S );
    isOk = isOk & isOk2;
    msg = [msg,'  ',msg2];
    msg = strtrim( msg );
    if ~isempty(msg)
        error_handler( isOk, msg, nargout );
    end
    
return





function error_handler( isOk, msg, nArgsOut )

    if ( nArgsOut < 3 )
        
        if not( isOk )
            if isempty(msg)
                error('Code bug detected - isOk flag false but error message is empty');
            else
                error(msg);
            end
        elseif ~isempty(msg)
            warning(msg);
        end
        
    end
            
return





%function run_test
%
%    write_ref -test;
%    
%return